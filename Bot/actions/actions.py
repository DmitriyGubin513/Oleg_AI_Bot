from typing import Text, Dict, Any, List

import datetime
import requests
import re
import ast
from rasa_sdk import Action, Tracker
from rasa_sdk.events import SlotSet
from rasa_sdk.executor import CollectingDispatcher
from spacy.lang.en.tokenizer_exceptions import morph

from config import weather_APIKEY
import spacy

nlp = spacy.load("ru_core_news_sm")


# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa-pro/concepts/custom-actions


# This is a simple example for a custom action which utters "Hello World!"

# from typing import Any, Text, Dict, List
#
# from rasa_sdk import Action, Tracker
# from rasa_sdk.executor import CollectingDispatcher
#
#
def get_weather(city):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_APIKEY}&units=metric&lang=ru"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            weather_desc = data["weather"][0]["description"]
            return f"–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {weather_desc}. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C."
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥."
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –û—à–∏–±–∫–∞: {e}"


class ActionGetWeather(Action):
    def name(self) -> Text:
        return "action_get_weather"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        city = tracker.get_slot("city")

        if not city:
            text = tracker.latest_message.get("text")
            doc = nlp(text)
            city = next((ent.text for ent in doc.ents if ent.label_ == "GPE"), None)

        city_norm = city

        if not city_norm:
            dispatcher.utter_message(text="—É—Ç–æ—á–Ω–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ")
            return []

        response = get_weather(city_norm)

        dispatcher.utter_message(text=response)
        return [SlotSet("city", city_norm)]



#–î–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
class ActionTellTime(Action):
    def name(self) -> Text:
        return "action_tell_time"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        time_format = domain.get("config", {}).get("time_format", "%H:%M")
        now = datetime.datetime.now().strftime(time_format)
        message = f"–°–µ–π—á–∞—Å {now}"
        dispatcher.utter_message(text=message)
        return []


class ActionTellDay(Action):
    def name(self) -> Text:
        return "action_tell_day"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        lang = domain.get("config", {}).get("language", "ru")
        day = datetime.datetime.now().strftime("%A")

        days_translation = {
            "ru": {
                "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                "Wednesday": "–°—Ä–µ–¥–∞",
                "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                "Saturday": "–°—É–±–±–æ—Ç–∞",
                "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            },
            "en": {
                "Monday": "Monday",
                "Tuesday": "Tuesday",
                "Wednesday": "Wednesday",
                "Thursday": "Thursday",
                "Friday": "Friday",
                "Saturday": "Saturday",
                "Sunday": "Sunday"
            }
        }

        day_localized = days_translation.get(lang, {}).get(day, day)
        message = f"–°–µ–≥–æ–¥–Ω—è {day_localized}"
        dispatcher.utter_message(text=message)
        return []

class ActionTellDate(Action):
    def name(self) -> Text:
        return "action_tell_date"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        date_format = "%d.%m.%Y" if lang == "ru" else "%Y-%m-%d"
        date = datetime.datetime.now().strftime(date_format)
        message = f"–°–µ–≥–æ–¥–Ω—è {date}"
        dispatcher.utter_message(text=message)
        return []

#–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è
class ActionCalculate(Action):
    def name(self) -> Text:
        return "action_calculate"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        user_text = tracker.latest_message.get("text", "")

        math_expr = self._extract_math_expression(user_text)

        if not math_expr:
            msg = self._get_message("no_expr", lang)
            dispatcher.utter_message(text=msg)
            return [SlotSet("last_bot_message", msg)]

        try:
            result = self._safe_calculation(math_expr)
            msg = self._format_result(result, lang)
        except:
            msg = self._get_message("invalid", lang)

        dispatcher.utter_message(text=msg)
        return [SlotSet("last_bot_message", msg)]

    def _extract_math_expression(self, text: Text) -> Text:
        """–ü–æ–∏—Å–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º regex"""
        matches = re.findall(r"(?:\d+\.?\d*|\.\d+|\d+)(?:\s*[+\-*/%]\s*(?:\d+\.?\d*|\.\d+|\d+)|\([^)]+\))+", text)
        return matches[0] if matches else ""

    def _safe_calculation(self, expr: Text) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π AST"""
        tree = ast.parse(expr, mode='eval')

        allowed_nodes = (
            ast.Expression, ast.Constant, ast.BinOp,
            ast.UnaryOp, ast.Add, ast.Sub,
            ast.Mult, ast.Div, ast.USub, ast.UAdd
        )

        for node in ast.walk(tree):
            if not isinstance(node, allowed_nodes):
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")

        return eval(expr)

    def _format_result(self, value: float, lang: Text) -> Text:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
        if lang == "ru":
            return f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {value:.2f}".replace(".00", "")  # –£–±–∏—Ä–∞–µ–º .00 –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        return f"üìä Result: {value:.2f}".replace(".00", "")

    def _get_message(self, msg_type: Text, lang: Text) -> Text:
        """–õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        messages = {
            "ru": {
                "no_expr": "üî¢ –ù–µ –≤–∏–∂—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
                "invalid": "‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            },
            "en": {
                "no_expr": "üî¢ I can't find a math expression",
                "invalid": "‚ùå Can't calculate this expression"
            }
        }
        return messages.get(lang, {}).get(msg_type, "")