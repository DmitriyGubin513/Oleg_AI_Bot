import sqlite3
from typing import Text, Dict, Any, List
import datetime
import requests
import re
import ast
from rasa_sdk import Action, Tracker
from rasa_sdk.events import SlotSet
from rasa_sdk.executor import CollectingDispatcher
import spacy
from duckduckgo_search.duckduckgo_search import DDGS

from config import weather_APIKEY

DB_NAME = "bot.db"

nlp = spacy.load("ru_core_news_sm")


def get_weather(city):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_APIKEY}&units=metric&lang=ru"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            weather_desc = data["weather"][0]["description"]
            return f"–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {weather_desc}. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C."
        else:
            return f"–ú–æ–π —Å–∏–Ω–æ–ø—Ç–∏–∫ –Ω–µ –∑–Ω–∞–µ—Ç –æ –≥–æ—Ä–æ–¥–µ {city}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥, —Å—ç—Ä."
    except Exception as e:
        return f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ({e}), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, —Å—ç—Ä."


def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS user_memory (
        user_id TEXT PRIMARY KEY,
        name TEXT,
        favorite_topic TEXT,
        last_seen TEXT
    );
    """)
    conn.commit()
    conn.close()


class ActionGetWeather(Action):
    def name(self) -> Text:
        return "action_get_weather"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        text = tracker.latest_message.get("text", "")
        doc = nlp(text)

        ent = next((e for e in doc.ents if e.label_ == "LOC"), None)
        if ent:
            lemmas = [token.lemma_ for token in ent]
            city = " ".join(lemma.title() for lemma in lemmas)
        else:
            city = tracker.get_slot("city")

        if not city:
            dispatcher.utter_message(template="utter_ask_city")
            return []

        response = get_weather(city)

        dispatcher.utter_message(text=response)
        return [SlotSet("city", city)]


# –î–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
class ActionTellTime(Action):
    def name(self) -> Text:
        return "action_tell_time"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        time_format = domain.get("config", {}).get("time_format", "%H:%M")
        now = datetime.datetime.now().strftime(time_format)
        message = f"–°–µ–π—á–∞—Å {now}"
        dispatcher.utter_message(text=message)
        return []


class ActionTellDay(Action):
    def name(self) -> Text:
        return "action_tell_day"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        lang = domain.get("config", {}).get("language", "ru")
        day = datetime.datetime.now().strftime("%A")

        days_translation = {
            "ru": {
                "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                "Wednesday": "–°—Ä–µ–¥–∞",
                "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                "Saturday": "–°—É–±–±–æ—Ç–∞",
                "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            },
            "en": {
                "Monday": "Monday",
                "Tuesday": "Tuesday",
                "Wednesday": "Wednesday",
                "Thursday": "Thursday",
                "Friday": "Friday",
                "Saturday": "Saturday",
                "Sunday": "Sunday"
            }
        }

        day_localized = days_translation.get(lang, {}).get(day, day)
        message = f"–°–µ–≥–æ–¥–Ω—è {day_localized}"
        dispatcher.utter_message(text=message)
        return []


class ActionTellDate(Action):
    def name(self) -> Text:
        return "action_tell_date"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        lang = domain.get("config", {}).get("language", "ru")
        date_format = "%d.%m.%Y" if lang == "ru" else "%Y-%m-%d"
        date = datetime.datetime.now().strftime(date_format)
        message = f"–°–µ–≥–æ–¥–Ω—è {date}"
        dispatcher.utter_message(text=message)
        return []


# –ö–∞–ª—å–∫—É–ª—è—Ü–∏—è
class ActionCalculate(Action):
    def name(self) -> Text:
        return "action_calculate"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        user_text = tracker.latest_message.get("text", "")

        math_expr = self._extract_math_expression(user_text)

        if not math_expr:
            msg = self._get_message("no_expr", lang)
            dispatcher.utter_message(text=msg)
            return []

        try:
            result = self._safe_calculation(math_expr)
            msg = self._format_result(result, lang)
        except:
            msg = self._get_message("invalid", lang)

        dispatcher.utter_message(text=msg)
        return []

    def _extract_math_expression(self, text: Text) -> Text:
        """–ü–æ–∏—Å–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º regex"""
        matches = re.findall(r"(?:\d+\.?\d*|\.\d+|\d+)(?:\s*[+\-*/%]\s*(?:\d+\.?\d*|\.\d+|\d+)|\([^)]+\))+", text)
        return matches[0] if matches else ""

    def _safe_calculation(self, expr: Text) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π AST"""
        tree = ast.parse(expr, mode='eval')

        allowed_nodes = (
            ast.Expression, ast.Constant, ast.BinOp,
            ast.UnaryOp, ast.Add, ast.Sub,
            ast.Mult, ast.Div, ast.USub, ast.UAdd
        )

        for node in ast.walk(tree):
            if not isinstance(node, allowed_nodes):
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")

        return eval(expr)

    def _format_result(self, value: float, lang: Text) -> Text:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞"""
        if lang == "ru":
            return f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {value:.2f}".replace(".00", "")  # –£–±–∏—Ä–∞–µ–º .00 –¥–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        return f"üìä Result: {value:.2f}".replace(".00", "")

    def _get_message(self, msg_type: Text, lang: Text) -> Text:
        """–õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        messages = {
            "ru": {
                "no_expr": "üî¢ –ù–µ –≤–∏–∂—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
                "invalid": "‚ùå –ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
            },
            "en": {
                "no_expr": "üî¢ I can't find a math expression",
                "invalid": "‚ùå Can't calculate this expression"
            }
        }
        return messages.get(lang, {}).get(msg_type, "")


class ActionRepeat(Action):
    """–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    —Ñ–æ—Ä–º–∞—Ç–∞ '–°–∫–∞–∂–∏ –∫–æ—Ç', '–ü–æ–≤—Ç–æ—Ä–∏: —Å–æ–±–∞–∫–µ–Ω', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏ '–£—Ç–æ—á–∫–∞'' –∏
    –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ—Ä–∞–∑—É –±–µ–∑ –ø—Ä–æ—Å—å–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å :3
    """

    def name(self) -> Text:
        return "action_repeat"

    def run(self,
            dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        try:
            user_msg = tracker.latest_message.get("text", "") or ""

            verbs = ["–ø–æ–≤—Ç–æ—Ä–∏", "—Å–∫–∞–∂–∏"]
            postfixes = ["–∑–∞ –º–Ω–æ–π", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞"]

            verbs_pattern = "|".join(re.escape(a) for a in verbs)
            postfixes_pattern = "|".join(re.escape(a) for a in postfixes)

            # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            pattern = re.compile(
                rf'''
                ^                                   # –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
                (?:.*?\b)?                          # –ª—é–±–æ–π –≤–≤–æ–¥ –ø–µ—Ä–µ–¥ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: "–ø–æ–≤—Ç–æ—Ä–∏" –∏–ª–∏ "—Å–∫–∞–∂–∏" 
                                                    # (–Ω–∞–ø—Ä., "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–∞–∂–∏")
                (?:{verbs_pattern})                 # –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                (?:\s+(?:{postfixes_pattern}))?     # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ "–∑–∞ –º–Ω–æ–π"
                (?:[:\s]+)                          # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—å—á–∏–∫–∏
                [¬´"‚Äù]?                              # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞
                (?P<text_to_repeat>.+?)             # —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–∏–∑–≤–ª–µ–∫–∞–µ–º -> group 'text_to_repeat')
                [¬ª"‚Äù]?                              # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞
                $                                   # –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
                ''',
                flags=re.IGNORECASE | re.UNICODE | re.VERBOSE
            )

            match = pattern.match(user_msg)
            if match:
                to_repeat = match.group("text_to_repeat").strip()
                dispatcher.utter_message(text=f"–ü–æ–≤—Ç–æ—Ä—è—é: {to_repeat}")
            else:
                dispatcher.utter_message(
                    text="–ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å. –°–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏: –∫–æ—Ç' -> '–∫–æ—Ç' "
                         "–∏–ª–∏ '–°–∫–∞–∂–∏ –∑–∞ –º–Ω–æ–π –ü—Ä–∏–≤–µ—Ç' -> '–ü—Ä–∏–≤–µ—Ç'"
                )
            return []
        except Exception as e:
            dispatcher.utter_message(
                text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ({e}), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ, —Å—ç—Ä."
            )
            return []


class ActionSaveName(Action):
    def name(self):
        return "action_save_name"

    def run(self, dispatcher, tracker: Tracker, domain):
        try:
            init_db()
            user_id = tracker.sender_id
            name = tracker.get_slot("name")
            topic = tracker.get_slot("favorite_topic")

            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO user_memory(user_id, name, favorite_topic, last_seen)
                VALUES (?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                  name=excluded.name,
                  favorite_topic=excluded.favorite_topic,
                  last_seen=excluded.last_seen
            """, (user_id, name, topic, datetime.datetime.utcnow().isoformat()))
            conn.commit()
            conn.close()

            dispatcher.utter_message(text=f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}")
            return []
        except Exception as e:
            dispatcher.utter_message(text=f"–ü–∞–º—è—Ç—å –º–µ–Ω—è –ø–æ–¥–≤–æ–¥–∏—Ç ({e}) :—Å")
            return []


class ActionSaveTopic(Action):
    def name(self):
        return "action_save_topic"

    def run(self, dispatcher, tracker: Tracker, domain):
        try:
            init_db()
            user_id = tracker.sender_id
            name = tracker.get_slot("name")
            topic = tracker.get_slot("favorite_topic")

            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO user_memory(user_id, name, favorite_topic, last_seen)
                VALUES (?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                  name=excluded.name,
                  favorite_topic=excluded.favorite_topic,
                  last_seen=excluded.last_seen
            """, (user_id, name, topic, datetime.datetime.utcnow().isoformat()))
            conn.commit()
            conn.close()

            dispatcher.utter_message(text=f"–û—á–µ–Ω—å –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ {topic}.")
            return []
        except Exception as e:
            dispatcher.utter_message(text=f"–ü–∞–º—è—Ç—å –º–µ–Ω—è –ø–æ–¥–≤–æ–¥–∏—Ç ({e}) :—Å")
            return []


class ActionAskAboutSelf(Action):
    def name(self):
        return "action_ask_about_self"

    def run(self, dispatcher, tracker: Tracker, domain):
        try:
            init_db()
            user_id = tracker.sender_id

            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute("SELECT name, favorite_topic FROM user_memory WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            conn.close()

            if row:
                name, topic = row
                if name and topic:
                    text = f"–¢–µ–±—è –∑–æ–≤—É—Ç {name}, –∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ {topic}."
                elif name and not topic:
                    text = f"–¢–µ–±—è –∑–æ–≤—É—Ç {name}! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"
                elif topic and not name:
                    text = f"–¢–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ {topic}, —Ä–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
                else:
                    text = ("–Ø –Ω–∏—á–µ–≥–æ –æ —Ç–µ–±–µ –Ω–µ –∑–Ω–∞—é –æ.–æ\n"
                            "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?")

                dispatcher.utter_message(text=text)
                return [SlotSet("name", name), SlotSet("favorite_topic", topic)]
            else:
                dispatcher.utter_message(text=("–Ø –Ω–∏—á–µ–≥–æ –æ —Ç–µ–±–µ –Ω–µ –∑–Ω–∞—é –æ.–æ\n"
                                               "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç –∏ —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?"))
            return []
        except Exception as e:
            dispatcher.utter_message(text=f"–ü–∞–º—è—Ç—å –º–µ–Ω—è –ø–æ–¥–≤–æ–¥–∏—Ç ({e}) :—Å")
            return []


class ActionMemoryInit(Action):
    def name(self):
        return "action_memory_init"

    def run(self, dispatcher, tracker: Tracker, domain):
        try:
            init_db()
            user_id = tracker.sender_id

            conn = sqlite3.connect(DB_NAME)
            cursor = conn.cursor()
            cursor.execute("SELECT name, favorite_topic FROM user_memory WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            conn.close()

            to_save = []
            if row:
                name, topic = row
                if name:
                    to_save.append(SlotSet("name", name))
                    dispatcher.utter_message(f"–ü—Ä–∏–≤–µ—Ç, {name}.")
                if topic:
                    to_save.append(SlotSet("favorite_topic", topic))

                return to_save
            return []
        except Exception as e:
            return []


class ActionSearchWeb(Action):
    def name(self):
        return "action_search_web"

    def run(self, dispatcher, tracker, domain):
        term = tracker.get_slot("search_term")
        if not term:
            dispatcher.utter_message("–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            return []

        with DDGS() as ddgs:
            results = ddgs.text(term, max_results=5)

        if not results:
            dispatcher.utter_message(text=f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ –∑–∞–ø—Ä–æ—Å—É '{term}'")
            return []

        reply = ["–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:"]
        for r in results:
            title = r.get("title") or r.get("body","(–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)")
            url = r.get("href") or r.get("url","--")
            reply.append(f"- {title}: {url}")

        dispatcher.utter_message(text="\n".join(reply))
        return [SlotSet("search_term", term)]
